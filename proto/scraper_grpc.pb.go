// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: scraper.proto

package trend_scratcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScraperClient is the client API for Scraper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScraperClient interface {
	Control(ctx context.Context, opts ...grpc.CallOption) (Scraper_ControlClient, error)
}

type scraperClient struct {
	cc grpc.ClientConnInterface
}

func NewScraperClient(cc grpc.ClientConnInterface) ScraperClient {
	return &scraperClient{cc}
}

func (c *scraperClient) Control(ctx context.Context, opts ...grpc.CallOption) (Scraper_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scraper_ServiceDesc.Streams[0], "/scraper.Scraper/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &scraperControlClient{stream}
	return x, nil
}

type Scraper_ControlClient interface {
	Send(*ControlRequest) error
	Recv() (*ControlResponse, error)
	grpc.ClientStream
}

type scraperControlClient struct {
	grpc.ClientStream
}

func (x *scraperControlClient) Send(m *ControlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scraperControlClient) Recv() (*ControlResponse, error) {
	m := new(ControlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScraperServer is the server API for Scraper service.
// All implementations must embed UnimplementedScraperServer
// for forward compatibility
type ScraperServer interface {
	Control(Scraper_ControlServer) error
	mustEmbedUnimplementedScraperServer()
}

// UnimplementedScraperServer must be embedded to have forward compatible implementations.
type UnimplementedScraperServer struct {
}

func (UnimplementedScraperServer) Control(Scraper_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedScraperServer) mustEmbedUnimplementedScraperServer() {}

// UnsafeScraperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScraperServer will
// result in compilation errors.
type UnsafeScraperServer interface {
	mustEmbedUnimplementedScraperServer()
}

func RegisterScraperServer(s grpc.ServiceRegistrar, srv ScraperServer) {
	s.RegisterService(&Scraper_ServiceDesc, srv)
}

func _Scraper_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScraperServer).Control(&scraperControlServer{stream})
}

type Scraper_ControlServer interface {
	Send(*ControlResponse) error
	Recv() (*ControlRequest, error)
	grpc.ServerStream
}

type scraperControlServer struct {
	grpc.ServerStream
}

func (x *scraperControlServer) Send(m *ControlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scraperControlServer) Recv() (*ControlRequest, error) {
	m := new(ControlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scraper_ServiceDesc is the grpc.ServiceDesc for Scraper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scraper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraper.Scraper",
	HandlerType: (*ScraperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _Scraper_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "scraper.proto",
}
